{
  "stats": {
    "suites": 10,
    "tests": 34,
    "passes": 32,
    "pending": 2,
    "failures": 0,
    "start": "2024-02-05T00:17:25.113Z",
    "end": "2024-02-05T00:18:11.787Z",
    "duration": 46674,
    "testsRegistered": 34,
    "passPercent": 100,
    "pendingPercent": 5.88235294117647,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2bc0dfca-478b-4493-8271-a4b470e45e5e",
      "title": "",
      "fullFile": "C:\\Users\\giorg\\Documents\\dev\\rest-api-automation-framework\\test\\trello\\trelloBoards.test.js",
      "file": "\\test\\trello\\trelloBoards.test.js",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Creating an authenticated instance\napi = new TrelloApi();\napi.authenticate();\n// Creating an unauthenticated instance\nunAuthApi = new TrelloApi();",
          "err": {},
          "uuid": "0540d4b9-9a11-41e1-8ad2-a2e797cdc9b9",
          "parentUUID": "2bc0dfca-478b-4493-8271-a4b470e45e5e",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1584,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Retrieving boards with a specific description prefix for cleanup\nconst boardsToBeDeleted = await api.getAllBoards({\n  desc: factory.qaPrefix,\n});\n// Deleting each board in parallel\nawait Promise.all(\n  boardsToBeDeleted.map((board) => {\n    return api.deleteBoard(board.id);\n  })\n);",
          "err": {},
          "uuid": "88d1b029-9c49-456d-a75f-59e341254f4a",
          "parentUUID": "2bc0dfca-478b-4493-8271-a4b470e45e5e",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "1757131d-8abe-4efd-9ffc-4a3945d861c8",
          "title": "Trello boards api tests (/boards)",
          "fullFile": "C:\\Users\\giorg\\Documents\\dev\\rest-api-automation-framework\\test\\trello\\trelloBoards.test.js",
          "file": "\\test\\trello\\trelloBoards.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e76e919b-cf11-4f83-9682-1456c7068a72",
              "title": "Create board (POST /boards)",
              "fullFile": "C:\\Users\\giorg\\Documents\\dev\\rest-api-automation-framework\\test\\trello\\trelloBoards.test.js",
              "file": "\\test\\trello\\trelloBoards.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Can create a board",
                  "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) Can create a board",
                  "timedOut": false,
                  "duration": 576,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = {\n  name: \"New Board\",\n  defaultLists: \"false\",\n  prefs_permissionLevel: \"public\",\n  prefs_comments: \"public\",\n  prefs_background: \"sky\",\n  desc: `${factory.qaPrefix}This is happy path for creating board`,\n};\nconst createBoardResp = await api.createBoard(payload);\nexpect(Object.keys(createBoardResp).length).to.equal(13);\nexpect(createBoardResp).to.have.property(\"id\").that.is.a(\"string\");\nexpect(createBoardResp).to.have.property(\"name\", payload.name);\nexpect(createBoardResp).to.have.property(\"desc\", payload.desc);\nexpect(createBoardResp.prefs).to.have.property(\"background\", payload.prefs_background);\nexpect(createBoardResp.prefs).to.have.property(\"comments\", payload.prefs_comments);\nexpect(createBoardResp.prefs).to.have.property(\n  \"permissionLevel\",\n  payload.prefs_permissionLevel\n);",
                  "err": {},
                  "uuid": "d4337a45-c659-4eef-994e-d3e90871153c",
                  "parentUUID": "e76e919b-cf11-4f83-9682-1456c7068a72",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Error is returned on create board call with invalid backgound color",
                  "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) Error is returned on create board call with invalid backgound color",
                  "timedOut": false,
                  "duration": 208,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = {\n  ...factory.board(),\n  prefs_background: \"burnt steak\",\n};\n// Even though api returns error, afterEach hook still kicks in and deletes random board\n// Confirmed from postman that a random board gets added despite the error message\nconst error = await guard(async () => api.createBoard(payload));\nexpect(error).to.have.property(\"statusCode\", 500);\nexpect(error).to.have.property(\"error\", \"Internal Server Error\");",
                  "err": {},
                  "uuid": "4f5128e9-fac2-4d29-ac49-7dc867537045",
                  "parentUUID": "e76e919b-cf11-4f83-9682-1456c7068a72",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Error returned when creating a board and required prop(Board name) length is 0)",
                  "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) Error returned when creating a board and required prop(Board name) length is 0)",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = {\n  ...factory.board(),\n  name: \"\",\n};\nconst errorResp = await guard(async () => api.createBoard(payload));\nexpect(errorResp).to.have.property(\"statusCode\", 400);\nexpect(errorResp).to.have.property(\"message\", '400 - {\"message\":\"invalid value for name\",\"error\":\"ERROR\"}');",
                  "err": {},
                  "uuid": "e990e61d-218d-47f6-8a88-b438ab88bde3",
                  "parentUUID": "e76e919b-cf11-4f83-9682-1456c7068a72",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Can create new board with previously created board name",
                  "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) Can create new board with previously created board name",
                  "timedOut": false,
                  "duration": 701,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const createBoardResponse = await api.createBoard(factory.board());\nconst payload = {\n  ...factory.board(),\n  name: createBoardResponse.name,\n};\nconst createBoardResp = await api.createBoard(payload);\nexpect(createBoardResp).to.have.property(\"id\", createBoardResp.id);\nexpect(createBoardResp).to.have.property(\"name\", payload.name);",
                  "err": {},
                  "uuid": "11bb17f0-3966-48c9-9c37-0bf24db18bcd",
                  "parentUUID": "e76e919b-cf11-4f83-9682-1456c7068a72",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Error is returned when sending create call using un-auth user",
                  "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) Error is returned when sending create call using un-auth user",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = await guard(async () => unAuthApi.createBoard(factory.board()));\nexpect(error).to.have.property(\"statusCode\", 401);\nexpect(error).to.have.property(\"error\", \"unauthorized permission requested\");",
                  "err": {},
                  "uuid": "f615179d-0259-4a9f-a0ad-f6ef621a9292",
                  "parentUUID": "e76e919b-cf11-4f83-9682-1456c7068a72",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "ce4af289-3749-4df9-814f-55b7b802aba8",
                  "title": "(DD) Can create board using different background colors",
                  "fullFile": "C:\\Users\\giorg\\Documents\\dev\\rest-api-automation-framework\\test\\trello\\trelloBoards.test.js",
                  "file": "\\test\\trello\\trelloBoards.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(DD) Background color: red",
                      "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) (DD) Can create board using different background colors (DD) Background color: red",
                      "timedOut": false,
                      "duration": 324,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  prefs_background: color,\n};\nconst createBoardResponse = await api.createBoard(payload);\nexpect(createBoardResponse).to.have.property(\"id\").that.is.a(\"string\");\nexpect(createBoardResponse).to.have.property(\"name\", payload.name);\nexpect(createBoardResponse.prefs).to.have.property(\"background\", color);",
                      "err": {},
                      "uuid": "a09fda7b-b9e2-4fd0-80ba-86cdf5620398",
                      "parentUUID": "ce4af289-3749-4df9-814f-55b7b802aba8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(DD) Background color: green",
                      "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) (DD) Can create board using different background colors (DD) Background color: green",
                      "timedOut": false,
                      "duration": 278,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  prefs_background: color,\n};\nconst createBoardResponse = await api.createBoard(payload);\nexpect(createBoardResponse).to.have.property(\"id\").that.is.a(\"string\");\nexpect(createBoardResponse).to.have.property(\"name\", payload.name);\nexpect(createBoardResponse.prefs).to.have.property(\"background\", color);",
                      "err": {},
                      "uuid": "005310a3-bfeb-453e-a271-f2e96f32fd18",
                      "parentUUID": "ce4af289-3749-4df9-814f-55b7b802aba8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(DD) Background color: orange",
                      "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) (DD) Can create board using different background colors (DD) Background color: orange",
                      "timedOut": false,
                      "duration": 351,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  prefs_background: color,\n};\nconst createBoardResponse = await api.createBoard(payload);\nexpect(createBoardResponse).to.have.property(\"id\").that.is.a(\"string\");\nexpect(createBoardResponse).to.have.property(\"name\", payload.name);\nexpect(createBoardResponse.prefs).to.have.property(\"background\", color);",
                      "err": {},
                      "uuid": "8a416578-f357-4d25-8aa6-a515e5b8faaa",
                      "parentUUID": "ce4af289-3749-4df9-814f-55b7b802aba8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(DD) Background color: sky",
                      "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) (DD) Can create board using different background colors (DD) Background color: sky",
                      "timedOut": false,
                      "duration": 307,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  prefs_background: color,\n};\nconst createBoardResponse = await api.createBoard(payload);\nexpect(createBoardResponse).to.have.property(\"id\").that.is.a(\"string\");\nexpect(createBoardResponse).to.have.property(\"name\", payload.name);\nexpect(createBoardResponse.prefs).to.have.property(\"background\", color);",
                      "err": {},
                      "uuid": "80575bff-3f9c-4e7c-b818-b3c9ca9460c7",
                      "parentUUID": "ce4af289-3749-4df9-814f-55b7b802aba8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(DD) Background color: blue",
                      "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) (DD) Can create board using different background colors (DD) Background color: blue",
                      "timedOut": false,
                      "duration": 540,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  prefs_background: color,\n};\nconst createBoardResponse = await api.createBoard(payload);\nexpect(createBoardResponse).to.have.property(\"id\").that.is.a(\"string\");\nexpect(createBoardResponse).to.have.property(\"name\", payload.name);\nexpect(createBoardResponse.prefs).to.have.property(\"background\", color);",
                      "err": {},
                      "uuid": "6b3b191a-693b-43f6-a7e6-eeaf4db041f8",
                      "parentUUID": "ce4af289-3749-4df9-814f-55b7b802aba8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(DD) Background color: grey",
                      "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) (DD) Can create board using different background colors (DD) Background color: grey",
                      "timedOut": false,
                      "duration": 284,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  prefs_background: color,\n};\nconst createBoardResponse = await api.createBoard(payload);\nexpect(createBoardResponse).to.have.property(\"id\").that.is.a(\"string\");\nexpect(createBoardResponse).to.have.property(\"name\", payload.name);\nexpect(createBoardResponse.prefs).to.have.property(\"background\", color);",
                      "err": {},
                      "uuid": "2173182b-d1b8-4568-8ec8-eecdf0624f6f",
                      "parentUUID": "ce4af289-3749-4df9-814f-55b7b802aba8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a09fda7b-b9e2-4fd0-80ba-86cdf5620398",
                    "005310a3-bfeb-453e-a271-f2e96f32fd18",
                    "8a416578-f357-4d25-8aa6-a515e5b8faaa",
                    "80575bff-3f9c-4e7c-b818-b3c9ca9460c7",
                    "6b3b191a-693b-43f6-a7e6-eeaf4db041f8",
                    "2173182b-d1b8-4568-8ec8-eecdf0624f6f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2084,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "95b17ec3-a426-4975-8464-22867242a5f9",
                  "title": "(DD) Can create board using different name and description lengths",
                  "fullFile": "C:\\Users\\giorg\\Documents\\dev\\rest-api-automation-framework\\test\\trello\\trelloBoards.test.js",
                  "file": "\\test\\trello\\trelloBoards.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(DD) Board name and desc length: 1 chars",
                      "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) (DD) Can create board using different name and description lengths (DD) Board name and desc length: 1 chars",
                      "timedOut": false,
                      "duration": 311,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  name: randomString,\n  desc: randomString,\n};\nconst createBoardResponse = await api.createBoard(payload);\nexpect(createBoardResponse).to.have.property(\"id\").that.is.a(\"string\");\nexpect(createBoardResponse).to.have.property(\"name\", randomString);\nexpect(createBoardResponse).to.have.property(\"desc\", randomString);",
                      "err": {},
                      "uuid": "cb24c356-86fe-4092-a055-8cf328c76674",
                      "parentUUID": "95b17ec3-a426-4975-8464-22867242a5f9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(DD) Board name and desc length: 8192 chars",
                      "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) (DD) Can create board using different name and description lengths (DD) Board name and desc length: 8192 chars",
                      "timedOut": false,
                      "duration": 402,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  name: randomString,\n  desc: randomString,\n};\nconst createBoardResponse = await api.createBoard(payload);\nexpect(createBoardResponse).to.have.property(\"id\").that.is.a(\"string\");\nexpect(createBoardResponse).to.have.property(\"name\", randomString);\nexpect(createBoardResponse).to.have.property(\"desc\", randomString);",
                      "err": {},
                      "uuid": "1f97bb8f-b590-4123-91e9-8a215c9f605c",
                      "parentUUID": "95b17ec3-a426-4975-8464-22867242a5f9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(DD) Board name and desc length: 16384 chars",
                      "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) (DD) Can create board using different name and description lengths (DD) Board name and desc length: 16384 chars",
                      "timedOut": false,
                      "duration": 333,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  name: randomString,\n  desc: randomString,\n};\nconst createBoardResponse = await api.createBoard(payload);\nexpect(createBoardResponse).to.have.property(\"id\").that.is.a(\"string\");\nexpect(createBoardResponse).to.have.property(\"name\", randomString);\nexpect(createBoardResponse).to.have.property(\"desc\", randomString);",
                      "err": {},
                      "uuid": "9605bb18-9cab-449b-8cc1-30f63a5586c0",
                      "parentUUID": "95b17ec3-a426-4975-8464-22867242a5f9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cb24c356-86fe-4092-a055-8cf328c76674",
                    "1f97bb8f-b590-4123-91e9-8a215c9f605c",
                    "9605bb18-9cab-449b-8cc1-30f63a5586c0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1046,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                },
                {
                  "uuid": "7544203d-34e2-4a41-b3d3-506a6ac98683",
                  "title": "(DD) Error is returned when creating a board with invalid \"name\" prop length",
                  "fullFile": "C:\\Users\\giorg\\Documents\\dev\\rest-api-automation-framework\\test\\trello\\trelloBoards.test.js",
                  "file": "\\test\\trello\\trelloBoards.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(DD) Invalid name length: 16385 chars",
                      "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) (DD) Error is returned when creating a board with invalid \"name\" prop length (DD) Invalid name length: 16385 chars",
                      "timedOut": false,
                      "duration": 110,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  name: randomString,\n};\nconst error = await guard(async () => api.createBoard(payload));\nexpect(error).to.have.property(\"statusCode\", 400);\nexpect(error.error).to.have.property(\"message\", \"invalid value for name\");",
                      "err": {},
                      "uuid": "9bc456f1-50e3-4652-abd2-49dc76c5feeb",
                      "parentUUID": "7544203d-34e2-4a41-b3d3-506a6ac98683",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(DD) Invalid name length: 17384 chars",
                      "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) (DD) Error is returned when creating a board with invalid \"name\" prop length (DD) Invalid name length: 17384 chars",
                      "timedOut": false,
                      "duration": 110,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  name: randomString,\n};\nconst error = await guard(async () => api.createBoard(payload));\nexpect(error).to.have.property(\"statusCode\", 400);\nexpect(error.error).to.have.property(\"message\", \"invalid value for name\");",
                      "err": {},
                      "uuid": "35360729-c1f8-4c17-aaf3-0f9b87f3d7b9",
                      "parentUUID": "7544203d-34e2-4a41-b3d3-506a6ac98683",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(DD) Invalid name length: 0 chars",
                      "fullTitle": "Trello boards api tests (/boards) Create board (POST /boards) (DD) Error is returned when creating a board with invalid \"name\" prop length (DD) Invalid name length: 0 chars",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  name: randomString,\n};\nconst error = await guard(async () => api.createBoard(payload));\nexpect(error).to.have.property(\"statusCode\", 400);\nexpect(error.error).to.have.property(\"message\", \"invalid value for name\");",
                      "err": {},
                      "uuid": "b13ec881-6f47-4485-aacd-6e57d02a7743",
                      "parentUUID": "7544203d-34e2-4a41-b3d3-506a6ac98683",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9bc456f1-50e3-4652-abd2-49dc76c5feeb",
                    "35360729-c1f8-4c17-aaf3-0f9b87f3d7b9",
                    "b13ec881-6f47-4485-aacd-6e57d02a7743"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 326,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [
                "d4337a45-c659-4eef-994e-d3e90871153c",
                "4f5128e9-fac2-4d29-ac49-7dc867537045",
                "e990e61d-218d-47f6-8a88-b438ab88bde3",
                "11bb17f0-3966-48c9-9c37-0bf24db18bcd",
                "f615179d-0259-4a9f-a0ad-f6ef621a9292"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1687,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "da52ec2d-1c21-455b-9806-98d4d1ec28aa",
              "title": "Get board (GET /boards/:boardId)",
              "fullFile": "C:\\Users\\giorg\\Documents\\dev\\rest-api-automation-framework\\test\\trello\\trelloBoards.test.js",
              "file": "\\test\\trello\\trelloBoards.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Get board (GET /boards/:boardId)\"",
                  "fullTitle": "Trello boards api tests (/boards) Get board (GET /boards/:boardId) \"before each\" hook in \"Get board (GET /boards/:boardId)\"",
                  "timedOut": false,
                  "duration": 360,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "createBoardResponse = await api.createBoard(factory.board());",
                  "err": {},
                  "uuid": "d4b379c2-7061-48f1-9cb2-a9dbf6ed26e6",
                  "parentUUID": "da52ec2d-1c21-455b-9806-98d4d1ec28aa",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Can get single board by ID",
                  "fullTitle": "Trello boards api tests (/boards) Get board (GET /boards/:boardId) Can get single board by ID",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const getBoardResponse = await api.getBoard(createBoardResponse.id);\nexpect(getBoardResponse).to.be.an(\"object\");\nexpect(getBoardResponse).to.have.property(\"id\", createBoardResponse.id);\nexpect(getBoardResponse)\n  .to.have.property(\"name\", createBoardResponse.name)\n  .that.is.a(\"string\");\nexpect(getBoardResponse).to.have.property(\"desc\").that.is.a(\"string\");",
                  "err": {},
                  "uuid": "6807f6c0-780d-4be8-9950-6d6ea8e1766a",
                  "parentUUID": "da52ec2d-1c21-455b-9806-98d4d1ec28aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Error is returned when sending get call using invalid board ID",
                  "fullTitle": "Trello boards api tests (/boards) Get board (GET /boards/:boardId) Error is returned when sending get call using invalid board ID",
                  "timedOut": false,
                  "duration": 127,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = await guard(async () => api.getBoard(createBoardResponse.id.slice(2)));\nexpect(error).to.have.property(\"statusCode\", 400);\nexpect(error).to.have.property(\"error\", \"invalid id\");",
                  "err": {},
                  "uuid": "d0307e5b-c68a-4f2d-9cb9-e2b3160d84a4",
                  "parentUUID": "da52ec2d-1c21-455b-9806-98d4d1ec28aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Error is returned when sending get call without board ID",
                  "fullTitle": "Trello boards api tests (/boards) Get board (GET /boards/:boardId) Error is returned when sending get call without board ID",
                  "timedOut": false,
                  "duration": 129,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = await guard(async () => api.getBoard());\nexpect(error).to.have.property(\"statusCode\", 400);\nexpect(error).to.have.property(\"error\", \"invalid id\");",
                  "err": {},
                  "uuid": "eea8487a-9441-46cd-b8f1-49b309351101",
                  "parentUUID": "da52ec2d-1c21-455b-9806-98d4d1ec28aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "BUG: Error is returned when sending get call using un-auth user",
                  "fullTitle": "Trello boards api tests (/boards) Get board (GET /boards/:boardId) BUG: Error is returned when sending get call using un-auth user",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "98f19ff4-4d4f-4cbe-bb8e-f44d5c1ae80a",
                  "parentUUID": "da52ec2d-1c21-455b-9806-98d4d1ec28aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6807f6c0-780d-4be8-9950-6d6ea8e1766a",
                "d0307e5b-c68a-4f2d-9cb9-e2b3160d84a4",
                "eea8487a-9441-46cd-b8f1-49b309351101"
              ],
              "failures": [],
              "pending": [
                "98f19ff4-4d4f-4cbe-bb8e-f44d5c1ae80a"
              ],
              "skipped": [],
              "duration": 361,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "98ccb6db-8976-40e6-8289-e60fa1db414a",
              "title": "Get all boards (GET /1/members/{id}/boards))",
              "fullFile": "C:\\Users\\giorg\\Documents\\dev\\rest-api-automation-framework\\test\\trello\\trelloBoards.test.js",
              "file": "\\test\\trello\\trelloBoards.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Can get all boards associated with a user",
                  "fullTitle": "Trello boards api tests (/boards) Get all boards (GET /1/members/{id}/boards)) Can get all boards associated with a user",
                  "timedOut": false,
                  "duration": 689,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Generate an array of 10 slots and map over generated boards\nconst boardsArray = Array(10).fill(10).map(() => factory.board());\n// Asynchronously create all boards using values from boardsArray\nawait Promise.all(boardsArray.map(board => api.createBoard(board)));\nconst getAllBoardsResp = await api.getAllBoards();\nexpect(getAllBoardsResp).to.be.an(\"array\").that.has.lengthOf(10);\nfor (const board of getAllBoardsResp) {\n  expect(board).to.have.property(\"id\").that.is.a(\"string\");\n  expect(board).to.have.property(\"name\").that.is.a(\"string\");\n  expect(board).to.have.property(\"desc\").that.is.a(\"string\");\n}",
                  "err": {},
                  "uuid": "dfbe4240-2d4f-4099-9bf5-b907667ea14f",
                  "parentUUID": "98ccb6db-8976-40e6-8289-e60fa1db414a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Can filter a list of boards by board prop(s)",
                  "fullTitle": "Trello boards api tests (/boards) Get all boards (GET /1/members/{id}/boards)) Can filter a list of boards by board prop(s)",
                  "timedOut": false,
                  "duration": 489,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const boardName = \"QA Engineer\";\nconst boardDesc = `Deleted code is debugged code.`;\nconst boardInfo = {\n  ...factory.board(),\n  name: `${boardName}`,\n  desc: `${boardDesc}`,\n};\nconst createBoardResponse = await api.createBoard(boardInfo);\nconst getAllBoardsResp = await api.getAllBoards({\n  name: `${boardName}`,\n  desc: `${boardDesc}`,\n});\nexpect(getAllBoardsResp[0]).to.have.property(\"id\", createBoardResponse.id);\nexpect(getAllBoardsResp[0]).to.have.property(\"name\", boardName);\nexpect(getAllBoardsResp[0]).to.have.property(\"desc\", createBoardResponse.desc);",
                  "err": {},
                  "uuid": "5821f8c6-121b-49d7-b1de-4055b4ce45ff",
                  "parentUUID": "98ccb6db-8976-40e6-8289-e60fa1db414a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Empty array of boards is returned when user doesn't have any boards",
                  "fullTitle": "Trello boards api tests (/boards) Get all boards (GET /1/members/{id}/boards)) Empty array of boards is returned when user doesn't have any boards",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const getAllBoardsResp = await api.getAllBoards();\nexpect(getAllBoardsResp).to.be.an(\"array\").that.is.empty;",
                  "err": {},
                  "uuid": "e58ea44a-a097-4100-9db8-0f3caf9f7641",
                  "parentUUID": "98ccb6db-8976-40e6-8289-e60fa1db414a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dfbe4240-2d4f-4099-9bf5-b907667ea14f",
                "5821f8c6-121b-49d7-b1de-4055b4ce45ff",
                "e58ea44a-a097-4100-9db8-0f3caf9f7641"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1304,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "485d1633-def9-4299-aa91-d7d5570a89d8",
              "title": "Update board (UPDATE /boards/:boardId)",
              "fullFile": "C:\\Users\\giorg\\Documents\\dev\\rest-api-automation-framework\\test\\trello\\trelloBoards.test.js",
              "file": "\\test\\trello\\trelloBoards.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Update board (UPDATE /boards/:boardId)\"",
                  "fullTitle": "Trello boards api tests (/boards) Update board (UPDATE /boards/:boardId) \"before each\" hook in \"Update board (UPDATE /boards/:boardId)\"",
                  "timedOut": false,
                  "duration": 293,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "createBoardResponse = await api.createBoard(factory.board());",
                  "err": {},
                  "uuid": "bedbf701-c6c1-42e0-9b00-2523109e3062",
                  "parentUUID": "485d1633-def9-4299-aa91-d7d5570a89d8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Can update board props by using board ID",
                  "fullTitle": "Trello boards api tests (/boards) Update board (UPDATE /boards/:boardId) Can update board props by using board ID",
                  "timedOut": false,
                  "duration": 317,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = {\n  ...factory.board(),\n  name: \"QA Engineer Responsibilities\",\n  desc: \"n/a\",\n};\nconst updateBoardResponse = await api.updateBoard(createBoardResponse.id, payload);\nexpect(updateBoardResponse).to.have.property(\"id\", createBoardResponse.id);\nexpect(updateBoardResponse).to.have.property(\"name\", payload.name);\nexpect(updateBoardResponse).to.have.property(\"desc\", payload.desc);",
                  "err": {},
                  "uuid": "469fac1f-6dbc-4279-a185-00d2abbef324",
                  "parentUUID": "485d1633-def9-4299-aa91-d7d5570a89d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Error is returned when attempting to update previously deleted board",
                  "fullTitle": "Trello boards api tests (/boards) Update board (UPDATE /boards/:boardId) Error is returned when attempting to update previously deleted board",
                  "timedOut": false,
                  "duration": 1047,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await api.deleteBoard(createBoardResponse.id, true);\nconst boardUpdateInfo = {\n  ...factory.board(),\n  name: \"newUpdatedName\",\n};\nconst error = await guard(async () =>\n  api.updateBoard(createBoardResponse.id, boardUpdateInfo)\n);\nexpect(error).to.have.property(\"statusCode\", 404);\nexpect(error).to.have.property(\"error\", \"The requested resource was not found.\");",
                  "err": {},
                  "uuid": "7f4ef0b7-0dd8-4a6d-9f19-e86dde29ddab",
                  "parentUUID": "485d1633-def9-4299-aa91-d7d5570a89d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Error is returned when user updates private board",
                  "fullTitle": "Trello boards api tests (/boards) Update board (UPDATE /boards/:boardId) Error is returned when user updates private board",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "482cae8b-1905-479f-8d45-3be516588f1b",
                  "parentUUID": "485d1633-def9-4299-aa91-d7d5570a89d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "7da113b3-7ddf-42ff-b10e-85e460e80a01",
                  "title": "(DD) Can update board using different board name lengths",
                  "fullFile": "C:\\Users\\giorg\\Documents\\dev\\rest-api-automation-framework\\test\\trello\\trelloBoards.test.js",
                  "file": "\\test\\trello\\trelloBoards.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(DD) Board name length: 16384 chars",
                      "fullTitle": "Trello boards api tests (/boards) Update board (UPDATE /boards/:boardId) (DD) Can update board using different board name lengths (DD) Board name length: 16384 chars",
                      "timedOut": false,
                      "duration": 214,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  name: boardName,\n};\nconst updateBoardResponse = await api.updateBoard(createBoardResponse.id, payload);\nexpect(updateBoardResponse).to.have.property(\"id\", createBoardResponse.id);\nexpect(updateBoardResponse)\n  .to.have.property(\"name\", boardName)\n  .that.has.lengthOf(boardName.length);",
                      "err": {},
                      "uuid": "dc36650d-37c1-4454-9bf2-e1cd53dfc790",
                      "parentUUID": "7da113b3-7ddf-42ff-b10e-85e460e80a01",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(DD) Board name length: 8192 chars",
                      "fullTitle": "Trello boards api tests (/boards) Update board (UPDATE /boards/:boardId) (DD) Can update board using different board name lengths (DD) Board name length: 8192 chars",
                      "timedOut": false,
                      "duration": 186,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  name: boardName,\n};\nconst updateBoardResponse = await api.updateBoard(createBoardResponse.id, payload);\nexpect(updateBoardResponse).to.have.property(\"id\", createBoardResponse.id);\nexpect(updateBoardResponse)\n  .to.have.property(\"name\", boardName)\n  .that.has.lengthOf(boardName.length);",
                      "err": {},
                      "uuid": "7b8ca463-1a54-4a85-9eb5-7477aa2d6501",
                      "parentUUID": "7da113b3-7ddf-42ff-b10e-85e460e80a01",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(DD) Board name length: 1 chars",
                      "fullTitle": "Trello boards api tests (/boards) Update board (UPDATE /boards/:boardId) (DD) Can update board using different board name lengths (DD) Board name length: 1 chars",
                      "timedOut": false,
                      "duration": 219,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const payload = {\n  ...factory.board(),\n  name: boardName,\n};\nconst updateBoardResponse = await api.updateBoard(createBoardResponse.id, payload);\nexpect(updateBoardResponse).to.have.property(\"id\", createBoardResponse.id);\nexpect(updateBoardResponse)\n  .to.have.property(\"name\", boardName)\n  .that.has.lengthOf(boardName.length);",
                      "err": {},
                      "uuid": "47179a86-702b-4831-b0b2-55261f9d965d",
                      "parentUUID": "7da113b3-7ddf-42ff-b10e-85e460e80a01",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dc36650d-37c1-4454-9bf2-e1cd53dfc790",
                    "7b8ca463-1a54-4a85-9eb5-7477aa2d6501",
                    "47179a86-702b-4831-b0b2-55261f9d965d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 619,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [
                "469fac1f-6dbc-4279-a185-00d2abbef324",
                "7f4ef0b7-0dd8-4a6d-9f19-e86dde29ddab"
              ],
              "failures": [],
              "pending": [
                "482cae8b-1905-479f-8d45-3be516588f1b"
              ],
              "skipped": [],
              "duration": 1364,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "bbd82245-fe90-44f1-ae30-7c52926e03eb",
              "title": "Delete board (DELETE /boards/:boardId)",
              "fullFile": "C:\\Users\\giorg\\Documents\\dev\\rest-api-automation-framework\\test\\trello\\trelloBoards.test.js",
              "file": "\\test\\trello\\trelloBoards.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Delete board (DELETE /boards/:boardId)\"",
                  "fullTitle": "Trello boards api tests (/boards) Delete board (DELETE /boards/:boardId) \"before each\" hook in \"Delete board (DELETE /boards/:boardId)\"",
                  "timedOut": false,
                  "duration": 349,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "createBoardResponse = await api.createBoard(factory.board());",
                  "err": {},
                  "uuid": "70b8aa1c-f4e6-49a1-935f-f4714762e3fd",
                  "parentUUID": "bbd82245-fe90-44f1-ae30-7c52926e03eb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Can delete single board by ID",
                  "fullTitle": "Trello boards api tests (/boards) Delete board (DELETE /boards/:boardId) Can delete single board by ID",
                  "timedOut": false,
                  "duration": 1187,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deleteBoardResponse = await api.deleteBoard(createBoardResponse.id, true);\nexpect(deleteBoardResponse).to.have.property(\"statusCode\", 200);\nexpect(deleteBoardResponse).to.have.property(\"statusMessage\", \"OK\");\nexpect(deleteBoardResponse).to.have.property(\"body\").that.is.eql({ _value: null });",
                  "err": {},
                  "uuid": "592b32eb-eafe-4665-aa3f-5be9eaa6fa56",
                  "parentUUID": "bbd82245-fe90-44f1-ae30-7c52926e03eb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Error is returned when trying to delete previosly deleted board",
                  "fullTitle": "Trello boards api tests (/boards) Delete board (DELETE /boards/:boardId) Error is returned when trying to delete previosly deleted board",
                  "timedOut": false,
                  "duration": 1292,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await api.deleteBoard(createBoardResponse.id, true);\nconst error = await guard(async () => api.deleteBoard(createBoardResponse.id));\nexpect(error).to.have.property(\"statusCode\", 404);\nexpect(error).to.have.property(\"error\", \"The requested resource was not found.\");",
                  "err": {},
                  "uuid": "8c314e25-931c-4922-bf6e-5da080e0c4ee",
                  "parentUUID": "bbd82245-fe90-44f1-ae30-7c52926e03eb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Error is returned when trying to get previously deleted board",
                  "fullTitle": "Trello boards api tests (/boards) Delete board (DELETE /boards/:boardId) Error is returned when trying to get previously deleted board",
                  "timedOut": false,
                  "duration": 1601,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await api.deleteBoard(createBoardResponse.id, true);\nconst error = await guard(async () => await api.getBoard(createBoardResponse.id));\nexpect(error).to.have.property(\"statusCode\", 404);\nexpect(error).to.have.property(\"error\", \"The requested resource was not found.\");",
                  "err": {},
                  "uuid": "1cfb65c9-6ed1-45d7-9ae9-100097d8136b",
                  "parentUUID": "bbd82245-fe90-44f1-ae30-7c52926e03eb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Error is returned when sending delete call using un-auth user",
                  "fullTitle": "Trello boards api tests (/boards) Delete board (DELETE /boards/:boardId) Error is returned when sending delete call using un-auth user",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = await guard(async () => unAuthApi.deleteBoard(createBoardResponse.id, true));\nexpect(error).to.have.property(\"statusCode\", 401);\nexpect(error).to.have.property(\"error\", \"unauthorized permission requested\");",
                  "err": {},
                  "uuid": "018f1f3d-0f17-4566-8f1e-0a9d01b2d3cd",
                  "parentUUID": "bbd82245-fe90-44f1-ae30-7c52926e03eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "592b32eb-eafe-4665-aa3f-5be9eaa6fa56",
                "8c314e25-931c-4922-bf6e-5da080e0c4ee",
                "1cfb65c9-6ed1-45d7-9ae9-100097d8136b",
                "018f1f3d-0f17-4566-8f1e-0a9d01b2d3cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4180,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}